#define ML_IN1 2   // For Motor 1 direction
#define ML_IN2 4   // For Motor 1 direction
#define ML_EN 3    // For Motor 1 speed 
#define MR_IN3 7   // For Motor 2 direction
#define MR_IN4 8   // For Motor 2 direction
#define MR_EN 6    // For Motor 2 speed

#define MOTOR_LEFT 1
#define MOTOR_RIGHT 2
#define OMEGA_LIMIT 20
#define VEL_LIMIT 235
#define CONTROL_FREQ 20

const int TrigPin_F = 11; // Trigger Pin of Ultrasonic Sensor
const int EchoPin_F = 10; // Echo Pin of Ultrasonic Sensor
const int TrigPin_R1 = 13; // Trigger pin of second ultra sonic sensor
const int EchoPin_R1 = 12;
const int TrigPin_R2 = 9; // Trigger pin of second ultra sonic sensor
const int EchoPin_R2 = 5;

float Fe = 0, Fe1 = 0, Fe2 = 0;
float Fkp = 1.3, Fki = 0.0125, Fkd = 0.9; // Define PID parameters through tuning
float Fk1 = Fkp + Fki + Fkd;
float Fk2 = -Fkp - 2 * Fkd;
float Fk3 = Fkd;

float Re = 0, Re1 = 0, Re2 = 0;
float Rkp = 1.3, Rki = 0.0125, Rkd = 0.9; // Define PID parameters through tuning
float Rk1 = Rkp + Rki + Rkd;
float Rk2 = -Rkp - 2 * Rkd;
float Rk3 = Rkd;

int Fu, Ru;

long duration_F, inches_F, cm_F;
long duration_R1, inches_R1, cm_R1;
long duration_R2, inches_R2, cm_R2;

//Filtering variables for front sensor
float var_F = 0.245431364;  // variance determined using excel and reading samples of raw sensor data
float varProcess_F = 1e2;
float Pc_F = 0.0;
float G_F = 0.0;
float P_F = 1.0;
float Xp_F = 0.0;
float Zp_F = 0.0;
float Xe_F = 0.0;

//Filtering variables for left sensor
float var_R1 = 0.245431364;  // variance determined using excel and reading samples of raw sensor data
float varProcess_R1 = 1e2;
float Pc_R1 = 0.0;
float G_R1 = 0.0;
float P_R1 = 1.0;
float Xp_R1 = 0.0;
float Zp_R1 = 0.0;
float Xe_R1 = 0.0;

//Filtering variables for right sensor
float var_R2 = 0.245431364;  // variance determined using excel and reading samples of raw sensor data
float varProcess_R2 = 1e2;
float Pc_R2 = 0.0;
float G_R2 = 0.0;
float P_R2 = 1.0;
float Xp_R2 = 0.0;
float Zp_R2 = 0.0;
float Xe_R2 = 0.0;

void set_motor_speed(int motor, int speed) {

  int vel_cmd = constrain(abs(speed), 0, 255);
  if (motor == MOTOR_LEFT) {
    if (speed > 0) {
      // Turn the motor in one direction
      digitalWrite(ML_IN1, LOW);
      digitalWrite(ML_IN2, HIGH);
      analogWrite(ML_EN, vel_cmd);
      //Serial.println("vel_left > 0");
    }
    else if (speed < 0) {
      // Turn the motor in another direction
      digitalWrite(ML_IN1, HIGH);
      digitalWrite(ML_IN2, LOW);
      analogWrite(ML_EN, vel_cmd);
      //Serial.println("vel_left < 0");
    }
    else
    {
      // Stop the motor
      digitalWrite(ML_IN1, LOW);
      digitalWrite(ML_IN2, LOW);
      analogWrite(ML_EN, 0);
      //Serial.println("vel_left = 0");

    }
  }
  else if (motor == MOTOR_RIGHT) {
    if (speed > 0) {
      // Turn the motor in one direction
      digitalWrite(MR_IN3, HIGH);
      digitalWrite(MR_IN4, LOW);
      analogWrite(MR_EN, vel_cmd);
      //Serial.println("vel_right > 0");
    }
    else if (speed < 0) {
      // Turn the motor in another direction
      digitalWrite(MR_IN3, LOW);
      digitalWrite(MR_IN4, HIGH);
      analogWrite(MR_EN,  vel_cmd);
      //Serial.println("vel_right < 0");
    }
    else
    {
      // Stop the motor
      digitalWrite(MR_IN3, LOW);
      digitalWrite(MR_IN4, LOW);
      analogWrite(MR_EN, 0);
      //Serial.println("vel_right = 0");

    }
  }
}

void set_boat_move(int vel, int omega) {
  // This function is called to set the
  // linear and angular velocity of the
  // boat. You can find the nutural position
  // of your boat by tuning the v and omega.

  // Linear and anglular velocity
  int v = constrain(vel, -VEL_LIMIT, VEL_LIMIT);
  int w = constrain(omega, -OMEGA_LIMIT, OMEGA_LIMIT);
  // Motor velocity command for both motors
  int vel_L = constrain(v + w, -255, 255);
  int vel_R = constrain(v - w, -255, 255);
  // Set speed for both motors
  set_motor_speed(MOTOR_LEFT, vel_L);
  set_motor_speed(MOTOR_RIGHT, vel_R);

}

void setup() {
  // Setup serial port
  Serial.begin(9600);

  pinMode(ML_IN1, OUTPUT);
  pinMode(ML_IN2, OUTPUT);
  pinMode(ML_EN, OUTPUT);
  pinMode(MR_IN3, OUTPUT);
  pinMode(MR_IN4, OUTPUT);
  pinMode(MR_EN, OUTPUT);

  pinMode(TrigPin_F, OUTPUT);
  pinMode(EchoPin_F, INPUT);
  pinMode(TrigPin_R1, OUTPUT);
  pinMode(EchoPin_R1, INPUT);
  pinMode(TrigPin_R2, OUTPUT);
  pinMode(EchoPin_R2, INPUT);

  // Set both motor speed as zero
  set_motor_speed(MOTOR_LEFT, 0);
  set_motor_speed(MOTOR_RIGHT, 0);

  // Wait for 5 second, let the system become stable
  delay(5000);
  ultrasonic_F();
  ultrasonic_R1();
  //ultrasonic_R2();
}

void loop() {

  //Too far from boundary, turn right
  HERE:
  while (Xe_F > 40 && Xe_R1 > 40)
  {
    //PID_R();
    set_motor_speed(MOTOR_LEFT, -200);
    set_motor_speed(MOTOR_RIGHT, 150);
    delay(100);
    ultrasonic_F();
    ultrasonic_R1();
    Serial.print("Boat turning right coz far from boundary : ");
    Serial.print(Xe_F);
    Serial.print(", ");
    Serial.println(Xe_R1);
    goto HERE;
    break;
  }

  //Boat levelled, go forward
  while (Xe_F > 40 && Xe_R1 > 20 && Xe_R1 <= 40)
  {
    //PID_R();
    set_motor_speed(MOTOR_LEFT, -150);
    set_motor_speed(MOTOR_RIGHT, -150);
    delay(100);
    ultrasonic_F();
    ultrasonic_R1();
    Serial.print("Boat going forward : ");
    Serial.print(Xe_F);
    Serial.print(", ");
    Serial.println(Xe_R1);
    goto HERE;
    break;
  }

  //Front block, turn left
  while (Xe_F > 20 && Xe_F <= 40)
  {
    set_motor_speed(MOTOR_LEFT, 230);
    set_motor_speed(MOTOR_RIGHT, -230);
    delay(100);
    ultrasonic_F();
    ultrasonic_R1();
    Serial.print("Boat turning left coz front block : ");
    Serial.print(Xe_F);
    Serial.print(", ");
    Serial.println(Xe_R1);
    goto HERE;
    break;
  }

  //Right boundary close, go left
  while (Xe_R1 <= 20)
  {
    //PID_R();
    set_motor_speed(MOTOR_LEFT, 230);
    set_motor_speed(MOTOR_RIGHT, -230);
    delay(100);
    ultrasonic_F();
    ultrasonic_R1();
    Serial.print("Boat turning left coz close to boundary: ");
    Serial.print(Xe_F);
    Serial.print(", ");
    Serial.println(Xe_R1);
    goto HERE;
    break;
  }

  //Front too close, back up
  while (Xe_F <= 20)
  {
    set_motor_speed(MOTOR_LEFT, 220);
    set_motor_speed(MOTOR_RIGHT, 80);
    delay(100);
    ultrasonic_F();
    ultrasonic_R1();
    Serial.print("Boat going reverse : ");
    Serial.print(Xe_F);
    Serial.print(", ");
    Serial.println(Xe_R1);
    goto HERE;
    break;
  }
}

void ultrasonic_F()  {
  digitalWrite(TrigPin_F, LOW);
  delayMicroseconds(2);
  digitalWrite(TrigPin_F, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin_F, LOW);
  duration_F = pulseIn(EchoPin_F, HIGH);
  cm_F = duration_F / 29 / 2;
  Pc_F = P_F + varProcess_F;
  G_F = Pc_F / (Pc_F + var_F);  // kalman gain
  P_F = (1 - G_F) * Pc_F;
  Xp_F = Xe_F;
  Zp_F = Xp_F;
  Xe_F = G_F * (cm_F - Zp_F) + Xp_F; // the kalman estimate
  //Serial.println(Xe_F);
}

void ultrasonic_R1()  {
  digitalWrite(TrigPin_R1, LOW);
  delayMicroseconds(2);
  digitalWrite(TrigPin_R1, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin_R1, LOW);
  duration_R1 = pulseIn(EchoPin_R1, HIGH);
  cm_R1 = duration_R1 / 29 / 2;
  Pc_R1 = P_R1 + varProcess_R1;
  G_R1 = Pc_R1 / (Pc_R1 + var_R1);  // kalman gain
  P_R1 = (1 - G_R1) * Pc_R1;
  Xp_R1 = Xe_R1;
  Zp_R1 = Xp_R1;
  Xe_R1 = G_R1 * (cm_R1 - Zp_R1) + Xp_R1; // the kalman estimate
  //Serial.println(Xe_R1);
}

void ultrasonic_R2()  {
  digitalWrite(TrigPin_R2, LOW);
  delayMicroseconds(2);
  digitalWrite(TrigPin_R2, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin_R2, LOW);
  duration_R2 = pulseIn(EchoPin_R2, HIGH);
  cm_R2 = duration_R2 / 29 / 2;
  Pc_R2 = P_R2 + varProcess_R2;
  G_R2 = Pc_R2 / (Pc_R2 + var_R2);  // kalman gain
  P_R2 = (1 - G_R2) * Pc_R2;
  Xp_R2 = Xe_R2;
  Zp_R2 = Xp_R2;
  Xe_R2 = G_R2 * (cm_R2 - Zp_R2) + Xp_R2; // the kalman estimate
  //Serial.println(Xe_R2);
}

void PID_F() //PID function
{
  Fk1 = Fkp + Fki + Fkd;
  Fk2 = -Fkp - 2 * Fkd;
  Fk3 = Fkd;
  Fe2 = Fe1;
  Fe1 = Fe;
  Fe = ((Xe_F - 33) * 10); // Compute current control error by reading ESC
  Fu = Fu + Fk1 * Fe + Fk2 * Fe1 + Fk3 * Fe2; //Implement u as control input
  Serial.print("Front:");
  Serial.println(Fu);
}

void PID_R() //PID function
{
  Rk1 = Rkp + Rki + Rkd;
  Rk2 = -Rkp - 2 * Rkd;
  Rk3 = Rkd;
  Re2 = Re1;
  Re1 = Re;
  Re = ((Xe_R1 - 23) * 10); // Compute current control error by reading ESC
  Ru = Ru + Rk1 * Re + Rk2 * Re1 + Rk3 * Re2; //Implement u as control input
  Serial.print("Right:");
  Serial.println(Ru);
}
